name: Deploy to Dev

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'  # This will trigger on tags like v1.2.3

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 3  # Job level timeout
    container:
      image: dtzar/helm-kubectl:latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        timeout-minutes: 3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
        timeout-minutes: 3

      # Install Docker in the container
      - name: Install Docker
        run: |
          # Install Docker CLI in the Alpine-based container
          apk add --no-cache docker
          # Make sure Docker is available
          which docker || echo "Docker not found in PATH"
          # Add docker to PATH if necessary
          export PATH=$PATH:/usr/bin
          echo "PATH=$PATH" >> $GITHUB_ENV
        timeout-minutes: 3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        timeout-minutes: 3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
        timeout-minutes: 3

      - name: Determine tag name
        id: tag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "IMAGE_TAG=latest" >> $GITHUB_OUTPUT
          else
            echo "IMAGE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
        timeout-minutes: 3

      - name: Build and push Docker image
        run: |
          cd ./services/hello-service/src
          docker build -t ghcr.io/${{ github.repository }}/hello-service:${{ steps.tag.outputs.IMAGE_TAG }} .
          docker push ghcr.io/${{ github.repository }}/hello-service:${{ steps.tag.outputs.IMAGE_TAG }}
        timeout-minutes: 3

      - name: Deploy to Kubernetes
        run: |
          # Create kubeconfig directory
          mkdir -p $HOME/.kube
          
          # Write kubeconfig from secret
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          
          # Create namespace if it doesnt exist
          kubectl create namespace dev --dry-run=client -o yaml | kubectl apply -f -

          # Create registry secret if it doesn't exist
          kubectl create secret docker-registry ghcr-credentials \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.CR_PAT }} \
            --namespace=dev \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Deploy/upgrade with Helm
          helm upgrade --install hello-service ./helm/hello-service \
            --namespace dev \
            --values ./helm/hello-service/values.dev.yaml \
            --set image.repository=ghcr.io/krl4k/hello-service \
            --set image.tag=${{ steps.tag.outputs.IMAGE_TAG }} \
            --set imagePullSecrets[0].name=ghcr-credentials \
            --wait \
            --timeout 3m
        timeout-minutes: 3
